import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Update the RSS Reader program from the previous project so that it reads
 * multiple RSS feeds and generates the same nicely formatted HTML page of links
 * for each feed, plus an HTML index page with links to the individual feed
 * pages.
 *
 * @author Rahul Sanghvi
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Declare String variables for title and description
        String title;
        String description;

        // Get the index for title and description
        int titleIndex = getChildElement(channel, "title");
        int desIndex = getChildElement(channel, "description");

        // Checks to see if title index exists and assigns the label to the
        // variable
        if (titleIndex != -1) {
            title = channel.child(titleIndex).child(0).label();
        } else {
            title = "Empty Title";
        }
        // Checks to see if description index exists and assigns the label to the
        // variable
        if (desIndex != -1) {
            description = channel.child(desIndex).child(0).label();
        } else {
            description = "No Description";
        }

        // Link
        String link = channel.child(getChildElement(channel, "link")).child(0).label();

        // Print Statements
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=" + link + ">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        // iterates the tree and calls processItem for each child under "item"
        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out);
            }
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Print Statements
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        XMLTree tree = xml;
        String tag1 = tag;

        // Index of child
        int index = -1;

        // Iterates and checks to see if any of the children
        // matches the tag and records the index
        for (int i = 0; i < tree.numberOfChildren(); i++) {
            if (tree.child(i).label().equals(tag1)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Opening tag for table row
        out.println("<tr>");

        // Declare String Variables
        String pubDate = "";
        String src = "";
        String srcLink = "";
        String link = "";
        String title = "";

        // Iterates all of item's children
        for (int i = 0; i < item.numberOfChildren(); i++) {

            // Checks if pubDate is a child's label
            if (item.child(i).label().equals("pubDate")) {
                pubDate = item.child(i).child(0).label();
            }

            // Checks if source is a child's label
            if (item.child(i).label().equals("source")) {
                // Check if source has a child
                if (item.child(i).numberOfChildren() != 0) {
                    src = item.child(i).child(0).label();
                    srcLink = item.child(i).attributeValue("url");
                }
            }

            // Checks if link is a child's label
            if (item.child(i).label().equals("link")) {
                link = item.child(i).child(0).label();
            }

            // Checks if title is a child's label
            if (item.child(i).label().equals("title")) {
                // Checks to see if title has a child
                if (item.child(i).numberOfChildren() != 0) {
                    title = item.child(i).child(0).label();
                }
            }
        } // End of for loop

        // Print Statements

        // Checking to see if there is no data available
        //Publication Date
        if (pubDate.equals("")) {
            out.println("<td>No data available</td>");
        } else {
            out.println("<td>" + pubDate + "</td>");
        }
        // Source and Source Link
        if (src.equals("")) {
            out.println("<td>No source available</td>");
        } else {
            out.println("<td><a href=" + srcLink + ">" + src + "</a></td>");
        }

        // Title or description
        if (title.equals("")) {
            int desIndex = getChildElement(item, "description");
            out.println("<td>" + item.child(desIndex).label() + "</td>");
        } else if (link.equals("")) {
            out.println("<td>" + title + "</td>");
        } else {
            out.println("<td><a href=" + link + ">" + title + "</a></td>");
        }

        out.println("</tr>"); //Closing Tag

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        //Create XML file
        XMLTree xml = new XMLTree1(url);
        //Variable to check if Rss is valid or not
        boolean validRss = true;

        //Checks to see if RSS is valid by checking attributes
        while (!xml.label().equals("rss") && !xml.hasAttribute("version")
                && !xml.attributeValue("version").equals("2.0")) {
            out.print("Invalid RSS feed.");
            validRss = false;
        }

        if (validRss) {
            xml = new XMLTree1(url);
            XMLTree channel = xml.child(getChildElement(xml, "channel"));
            SimpleWriter outputFile = new SimpleWriter1L(file);
            outputHeader(channel, outputFile);

            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), outputFile);
                }
            }
            outputFooter(outputFile);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // Asks uset to enter an XML file
        out.println("Enter an XML file: ");
        String xmlFile = in.nextLine();
        // Creates new xml tree from the xmlFile
        XMLTree xml = new XMLTree1(xmlFile);

        // Asks user to enter output file name
        out.println("Enter the name of the output file including the .html extension: ");
        String htmlFile = in.nextLine();

        // Creates new simplewriter object that takes in input from htmlFile
        SimpleWriter outputFile = new SimpleWriter1L(htmlFile);

        // Checks to see if the xml has a title attribute and prints to output
        // file tags with title if so
        if (xml.hasAttribute("title")) {
            outputFile.println("<html><head><title>" + xml.attributeValue("title")
                    + "</title></head>");
        }

        // Prints to output file the title as a header
        outputFile.println("<body><h2>" + xml.attributeValue("title") + "</h2>");
        outputFile.println("<ul>");

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            processFeed(xml.child(i).attributeValue("url"),
                    xml.child(i).attributeValue("file"), out);
            outputFile.println("<li><a href=" + xml.child(i).attributeValue("file") + ">"
                    + xml.child(i).attributeValue("name") + "</a></li>");
        }
        outputFile.println("</ul></body></html>");

        // Closes simplewriter and simplereader objects
        in.close();
        out.close();
        outputFile.close();
    }

}
